from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher

import db_main
from aiopg.sa import create_engine

import markups as nav
import take_random_funcs

bot = Bot(token='')
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    uid = message.from_user.id  # –∑–∞–ø–∏—Å–∞–ª id
    uname = message.from_user.full_name  # –∏–º—è
    person = {"name": uname, "tg_id": str(uid)}
    async with create_engine(user='postgres',
                             database='postgres',
                             host='127.0.0.1',
                             password='123456') as engine:
        if not await db_main.reg_check(engine, person["tg_id"]):
            await db_main.registration(engine, person)
            await message.reply("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞!", reply_markup=nav.mainMenu)
        else:
            await message.reply("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–µ–Ω—é", reply_markup=nav.mainMenu)

def isint(s):
    try:
        int(s)
        return True
    except ValueError:
        return False

@dp.message_handler()
async def echo_message(message: types.Message):
    if message.text == "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await bot.send_message(message.from_user.id, "–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=nav.mainMenu)

    if message.text == "üïπ–ò–ì–†–ê":
        await bot.send_message(message.from_user.id, "–ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã.\n–ò–≥—Ä–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞ —Å–æ—Å—Ç–∞–≤ –Ω–µ –º–µ–Ω–µ–µ 6 —á–µ–ª–æ–≤–µ–∫. –û–ø—Ç–∏–º–∞–ª—å–Ω–æ –æ—Ç 8 –¥–æ 12 —á–µ–ª–æ–≤–µ–∫.", reply_markup=nav.gameMenu)
    #gameMenu:
    if message.text == "üïπ–ù–æ–≤–∞—è –∏–≥—Ä–∞":
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –∏–≥—Ä–æ–∫–æ–≤:", reply_markup=nav.gameMenu)
    if isint(message.text):
        if int(message.text) < 17:
            # –¥–µ–ª–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É —á–∏—Å–ª—É
            for i in range(1, int(message.text)+1):
                x = take_random_funcs.generate_person()
                person = '''            –ü–æ–ª: <tg-spoiler>''' + x["gender"] + '''</tg-spoiler>
                –í–æ–∑—Ä–∞—Å—Ç: <tg-spoiler>''' + x["age"] + '''</tg-spoiler> –§–µ—Ä—Ç–∏–ª—å–Ω–æ—Å—Ç—å: <tg-spoiler>''' + x["fertility"] + '''</tg-spoiler>
                –†–æ—Å—Ç: <tg-spoiler>''' + x["height"] + '''</tg-spoiler> –¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ: <tg-spoiler>''' + x["body_type"] + '''</tg-spoiler>
                –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: <tg-spoiler>''' + x["profession"] + '''</tg-spoiler> –°—Ç–∞–∂: <tg-spoiler>''' + x["experience"] + ''' –ª–µ—Ç</tg-spoiler>
                –ó–¥–æ—Ä–æ–≤—å–µ: <tg-spoiler>''' + x["health"] + " " + x["health_pcs"] + '''%</tg-spoiler>
                –•–æ–±–±–∏: <tg-spoiler>''' + x["hobby"] + '''</tg-spoiler>
                –§–æ–±–∏—è: <tg-spoiler>''' + x["phobia"] + '''</tg-spoiler>
                –ß–µ—Ä—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞: <tg-spoiler>''' + x["trait"] + '''</tg-spoiler>
                –ë–∞–≥–∞–∂: <tg-spoiler>''' + x["baggage"] + '''</tg-spoiler>
                –î–æ–ø. –∏–Ω—Ñ–∞: <tg-spoiler>''' + x["information"] + '''</tg-spoiler>
                –ö–∞—Ä—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è ‚Ññ1: <tg-spoiler>''' + x["card1"] + '''</tg-spoiler>
                –ö–∞—Ä—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è ‚Ññ2: <tg-spoiler>''' + x["card2"] + '''</tg-spoiler>
                '''
                await bot.send_message(message.from_user.id, "–ö–∞—Ä—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ‚Ññ:" + str(i) + "\n\n" + person,
                                       reply_markup=nav.changeMenu, parse_mode=types.ParseMode.HTML)
            # –¥–µ–ª–∞–µ—Ç –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—É
            d = take_random_funcs.generate_disaster()
            await bot.send_message(message.from_user.id, "–ù–æ–≤–∞—è –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞:\n\n" + d, reply_markup=nav.changeMenu,
                                   parse_mode=types.ParseMode.HTML)
            # –¥–µ–ª–∞–µ—Ç –±—É–Ω–∫–µ—Ä
            b = take_random_funcs.generate_bunker()
            bunker = '''–ü–ª–æ—â–∞–¥—å: ''' + b["size"] + ''' –∫–≤.–º.
            –ö–æ–º–Ω–∞—Ç—ã: ''' + b['rooms'][0] + ''', ''' + b['rooms'][1] + ''', ''' + b['rooms'][2] + '''.
            –ü—Ä–µ–¥–º–µ—Ç—ã: ''' + b['items'] + '''.'''
            await message.answer("–ù–æ–≤—ã–π –±—É–Ω–∫–µ—Ä:\n\n<tg-spoiler>" + bunker + "</tg-spoiler>",
                                 parse_mode=types.ParseMode.HTML)

        else:
            await bot.send_message(message.from_user.id, "–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ –∏–≥—Ä–æ–∫–æ–≤.", reply_markup=nav.changeMenu)

    if message.text == "üîÅ–°–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É":
        await bot.send_message(message.from_user.id, "–ó–∞–º–µ–Ω–∞ –∫–∞—Ä—Ç—ã.", reply_markup=nav.changeMenu)

    #changeMenu:
    if message.text == "üìü–ë–£–ù–ö–ï–†":
        b = take_random_funcs.generate_bunker()
        bunker = '''–ü–ª–æ—â–∞–¥—å: ''' + b["size"] + ''' –∫–≤.–º.
–ö–æ–º–Ω–∞—Ç—ã: ''' + b['rooms'][0] + ''', ''' + b['rooms'][1] + ''', ''' + b['rooms'][2] + '''.
–ü—Ä–µ–¥–º–µ—Ç—ã: ''' + b['items'] + '''.'''
        await message.answer("–ù–æ–≤—ã–π –±—É–Ω–∫–µ—Ä:\n\n<tg-spoiler>" + bunker + "</tg-spoiler>", parse_mode=types.ParseMode.HTML)
    if message.text == "üôç‚Äç‚ôÇ–ü–ï–†–°–û–ù–ê–ñ":
        x = take_random_funcs.generate_person()
        person = '''–ü–æ–ª: <tg-spoiler>''' + x["gender"]+'''</tg-spoiler>
–í–æ–∑—Ä–∞—Å—Ç: <tg-spoiler>''' + x["age"]+'''.</tg-spoiler> –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ –æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä–µ–Ω–∏—é: <tg-spoiler>''' + x["fertility"]+'''</tg-spoiler>
–†–æ—Å—Ç: <tg-spoiler>''' + x["height"]+'''.</tg-spoiler> –¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ: <tg-spoiler>''' + x["body_type"]+'''</tg-spoiler>
–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: <tg-spoiler>''' + x["profession"]+'''.</tg-spoiler> –°—Ç–∞–∂: <tg-spoiler>''' + x["experience"]+''' –ª–µ—Ç</tg-spoiler>
–ó–¥–æ—Ä–æ–≤—å–µ: <tg-spoiler>''' + x["health"] + " " + x["health_pcs"] + '''%</tg-spoiler>
–•–æ–±–±–∏: <tg-spoiler>''' + x["hobby"]+'''</tg-spoiler>
–§–æ–±–∏—è: <tg-spoiler>''' + x["phobia"]+'''</tg-spoiler>
–ß–µ—Ä—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞: <tg-spoiler>''' + x["trait"]+'''</tg-spoiler>
–ë–∞–≥–∞–∂: <tg-spoiler>''' + x["baggage"]+'''</tg-spoiler>
–î–æ–ø. –∏–Ω—Ñ–∞: <tg-spoiler>''' + x["information"]+'''</tg-spoiler>
–ö–∞—Ä—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è ‚Ññ1: <tg-spoiler>''' + x["card1"]+'''</tg-spoiler>
–ö–∞—Ä—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è ‚Ññ2: <tg-spoiler>''' + x["card2"]+'''</tg-spoiler>
'''
        await bot.send_message(message.from_user.id, "–ù–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:\n\n" + person, reply_markup=nav.changeMenu, parse_mode=types.ParseMode.HTML)
    if message.text == "üéá–ö–ê–¢–ê–°–¢–†–û–§–ê":
        d = take_random_funcs.generate_disaster()
        await bot.send_message(message.from_user.id, "–ù–æ–≤–∞—è –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞:\n\n" + d, reply_markup=nav.changeMenu, parse_mode=types.ParseMode.HTML)


    if message.text == "‚ÑπÔ∏è–ü–æ–º–æ—â—å":
        await bot.send_message(message.from_user.id, "–¢—É—Ç –±—É–¥–µ—Ç —Ç—É—Ç–æ—Ä–∏–∞–ª –ø–æ –∏–≥—Ä–µ.", reply_markup=nav.helpMenu)



if __name__ == '__main__':
    executor.start_polling(dp)